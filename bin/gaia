#!/usr/bin/env bash
# shellcheck disable=SC1090
# shellcheck disable=SC2001

set +x

# Check bash version
# --------------------------------------------------
if [ "${BASH_VERSINFO[0]}" -lt 4 ]; then
    echo "Bash 4 or later is required"
    exit 1
fi

# Define directories and load config
# --------------------------------------------------
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  # resolve $SOURCE until file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  # if $SOURCE was a relative symlink, resolve it relative to path of symlink
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
rootdir=$(dirname "${DIR}") # up from bin to root directory

# import functions
# shellcheck source=/dev/null
function_lib="${rootdir}/lib/functions"
if [ -f "${function_lib}" ]; then
  source "${function_lib}"
else
  echo -e "Unable to load ${function_lib}.\nPlease reinstall Gaia."
  exit 1
fi
BASE_DIR="$PWD"
ENV_DIR="$BASE_DIR/env"
test -f "$BASE_DIR/.gaia" && source "$BASE_DIR/.gaia"
module_path="."

# Define valid commands
# --------------------------------------------------
declare -A terraform_commands other_commands valid_commands valid_options

# Terraform commands
terraform_commands[apply]="Builds or changes infrastructure"
terraform_commands[destroy]="Destroy Terraform-managed infrastructure"
terraform_commands[fmt]="Rewrites config files to canonical format"
terraform_commands[graph]="Create a visual graph of Terraform resources"
terraform_commands[import]="Import existing infrastructure into Terraform"
terraform_commands[output]="Read an output from a state file"
terraform_commands[plan]="Generate and show an execution plan"
terraform_commands[refresh]="Update local state file against real resources"
terraform_commands[taint]="Manually mark a resource for recreation"
terraform_commands[untaint]="Manually unmark a resource as tainted"
terraform_commands[validate]="Validates the Terraform files"
terraform_commands[force-unlock]="Manually unlock the state for the defined configuration"
terraform_commands[state]="Manually update state file"

# Other commands
other_commands[docs]="Generate documentation with terraform-docs"
other_commands[lint]="Detect errors with TFLint"
other_commands[run]="Alias command to validate, lint, plan, and apply"
other_commands[help]="Display this help"

# Options
valid_options["-v, --verbose"]="Display Terraform commands"
valid_options["-e, --env"]="Specify an environment"
valid_options["-m, --module"]="Specify the path for a Terraform module"
valid_options["-s, --show-commands"]="Show the Terraform commands but not run them"
valid_options["-x, --dry-run"]="Run a dry-run when running run command (validate, lint, plan)"

merge_map valid_commands terraform_commands other_commands

# Parse options
# --------------------------------------------------
parse_opts(){
  shift # skip the command
  declare -a opts
  until [ "$1" = "" ] ; do
    local first_char="${1:0:1}"
    if [ "$first_char" = "-" ] ; then
      local option="${1:1}"
      case $option in
        e|env|-env)
          shift
          if [ -z "$1" ]; then
            help
          fi
          export environment="$1";;
        m|module|-module)
          shift
          if [ -z "$1" ]; then
            help
          fi
          export module_path="$1";;
        v|verbose|-verbose)
            export verbose="true";;
        x|dry-run|-dry-run)
            export dry_run="true";;
        s|show-commands|-show-commands)
            export verbose="true"
            export show_commands="true";;
        h|help|-help) help;;
        # Terraform vars
        var)
            local key value var
            key=$(echo "$2" | cut -d "=" -f 1)
            value=$(echo "$2" | cut -d "=" -f 2)
            test "x${key}" = "xfeature" && { feature="$(echo "${value}" | tr '/' '-' )"; export feature; }
            var=$(echo "$2" | sed 's/\(.*\)=\(.*\)/\1="\2"/g')
            tf_vars+=(-var ${var} )
            ;;
        # All others Terraform options
        *)
            opts+=($1)
            ;;
      esac
    else
      # All arguments
      args+=($1)
    fi
    shift
 done
 cmd_vars="${tf_vars[*]}"; export cmd_vars
 cmd_opts="${opts[*]}"; export cmd_opts
 cmd_args="${args[*]}"; export cmd_args
}

# Terraform Commands
# --------------------------------------------------
init(){
  run_command="terraform init"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"

  test -n "${workspace}" || workspace="default"
  local exists
  exists=$(terraform workspace list | sed $'s/\r//' | grep -E "(^|\s+)${workspace}$" > /dev/null 2>&1; echo $?)
  if [ "${exists}" = "0" ]; then
    info "Selecting workspace '${workspace}'..."
    run_command="terraform workspace select ${workspace}"
    test "xtrue" = "x${verbose}" && debug "${run_command}"
    test "xtrue" = "x${show_commands}" || eval "${run_command}"
  else
    info "Creating workspace '${workspace}'..."
    run_command="terraform workspace new ${workspace}"
    test "xtrue" = "x${verbose}" && debug "${run_command}"
    test "xtrue" = "x${show_commands}" || eval "${run_command}"
  fi
}

plan(){
  info "Planning module '${module_path}'..."
  run_command="terraform plan ${vars} ${cmd_opts}"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

apply(){
  if [  "xtrue" != "x${dry_run}" ]; then
    info "Applying module '${module_path}'..."
    run_command="terraform apply -auto-approve=true ${vars} ${cmd_opts}"
    test "xtrue" = "x${verbose}" && debug "${run_command} "
    test "xtrue" = "x${show_commands}" || eval "${run_command}"
  fi
}

refresh(){
  info "Refreshing module '${module_path}'..."
  run_command="terraform refresh ${vars} ${cmd_opts}"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

destroy(){
  info "Destroying module '${module_path}'..."
  run_command="terraform destroy ${vars} ${cmd_opts}"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

output(){
  info "Outputting module '${module_path}'..."
  run_command="terraform output ${vars} ${cmd_opts}"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

taint(){
  info "Tainting resource '${cmd_args}' for module '${module_path}'..."
  run_command="terraform taint ${cmd_opts} ${cmd_args}"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

import(){
  info "Importing resource '${cmd_args}' for module '${module_path}'..."
  run_command="terraform import ${cmd_opts} ${cmd_args}"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

untaint(){
  info "Untainting resource '${cmd_args}' for module '${module_path}'..."
  run_command="terraform untaint ${cmd_opts} ${cmd_args}"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

graph(){
  info "Generating graph for module '${module_path}'..."
  run_command="terraform graph ${module_dir} ${cmd_opts}"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

fmt(){
  run_command="terraform fmt ${vars} ${cmd_opts}"
  info "Formatting module '${module_path}'..."
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

validate(){
  run_command="terraform validate ${cmd_opts} -check-variables=false"
  info "Validating module '${module_path}'..."
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

force-unlock(){
  run_command="terraform force-unlock ${cmd_args}"
  info "Force unlock '${cmd_args}' for module '${module_path}'... "
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

state(){
  run_command="terraform state ${cmd_args}"
  info "state '${cmd_args}' for module '${module_path}'... "
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

run(){
    validate
    lint
    plan
    apply
}

# Other Commands
# --------------------------------------------------
help() {
  echo "Usage: gaia COMMAND OPTIONS" >&2
  echo
  echo "A wrapper script for Terraform"
  echo
  echo "Terraform Commands:"
  padding='                '
  for cmd in "${!terraform_commands[@]}"; do
    description=${terraform_commands[$cmd]}
    printf "  %s %s %s\n" "$cmd" "${padding:${#cmd}}" "$description"
  done | sort -n -k3
  echo
  echo "The Terraform options for these commands might be passed"
  echo "See: https://www.terraform.io/docs/commands/index.html"
  echo
  echo "Options:"
  for cmd in "${!valid_options[@]}"; do
    description=${valid_options[$cmd]}
    printf "  %s %s %s\n" "$cmd" "${padding:${#cmd}}" "$description"
  done | sort -n -k3
  echo
  echo "Other Commands:"
  padding='                '
  for cmd in "${!other_commands[@]}"; do
    description=${other_commands[$cmd]}
    printf "  %s %s %s\n" "$cmd" "${padding:${#cmd}}" "$description"
  done | sort -n -k3
  exit 0
}

docs(){
  # Check programs needed are installed
  type terraform-docs >/dev/null 2>&1 || { error "Please install terraform-docs to run this command."; exit 1;}
  docs_dir="${BASE_DIR}/docs/${module_path}"
  mkdir -p "${docs_dir}"
  info "Documenting module '${module_path}'..."
  run_command="terraform-docs markdown ${module_dir}"
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}" > "${docs_dir}/variables.md"
}

lint(){
  # Check programs needed are installed
  type tflint >/dev/null 2>&1 || { error "Please install TFLint to run this command."; exit 1;}
  run_command="tflint"
  info "Linting module '${module_path}'..."
  test "xtrue" = "x${verbose}" && debug "${run_command}"
  test "xtrue" = "x${show_commands}" || eval "${run_command}"
}

# Hooks
# --------------------------------------------------
pre_hook(){
    defined=$(declare -f "pre_$command" 2>&1 > /dev/null; echo $?)
    if [ "${defined}" -eq 0 ]; then
      info "Running 'pre_$command' hook..."
      eval "pre_$command"
    fi
}

post_hook(){
    defined=$(declare -f "post_$command" 2>&1 > /dev/null; echo $?)
    if [ "${defined}" -eq 0 ]; then
      info "Running 'post_$command' hook..."
      eval "post_$command"
    fi
}

# Main
# --------------------------------------------------
command="$1"

# Check command
test "$command" = "help" && help
has_item "$command" "${!valid_commands[@]}" || help

# Parse options
parse_opts "$@"

# Show must go on
module_dir=$(realpath "$BASE_DIR/$module_path")
rm -fr "${module_dir}/.terraform"  # Force to download remote state
test -d "${module_dir}" || { error "Unable to resolve path: ${module_dir}"; exit 1;}
tf=$(find "${module_dir}" -maxdepth 1 -name "*.tf" | wc -l | tr -d ' ')
if [ "${tf}" -eq 0 ]; then error "Unable to find Terraform configuration files at: ${module_dir}"; exit 1; fi
cd "${module_dir}" || exit 1
test -f "${module_dir}/.gaia" && source "${module_dir}/.gaia"

# Check Terraform version >= 0.10.0
# --------------------------------------------------
# Find Terraform version
tf_version="$(terraform version | tr -d '\r' | head -n 1 | sed 's/Terraform v//')"

if [ "$( echo "${tf_version}" | awk -F'.' '( $1 >= 0 && $2 >= 10 )')" ]; then
   info "Using: Terraform ${tf_version} (in Docker: ${TERRAFORM_IN_DOCKER:-false})"
else
   error "This version of Gaia is only compatible with Terraform version >= 0.10.0."
   exit 1
fi

### Configuration
if [ -n "${environment}" ]; then
  vars="-var environment_name=${environment}"
  test -f "${ENV_DIR}/${environment}.tfvars" && vars="${vars} -var-file=${ENV_DIR}/${environment}.tfvars"
  test -f "${module_dir}/env/default.tfvars" && vars="${vars} -var-file=${module_dir}/env/default.tfvars"
  test -f "${module_dir}/env/${environment}.tfvars" && vars="${vars} -var-file=${module_dir}/env/${environment}.tfvars"
  export workspace="${environment}"
fi

# Define the command vars at the end to take precedence
vars="${vars} ${TERRAFORM_VARS} ${cmd_vars}"
export vars

### Define the workspace
if [ -n "${environment}" ] && [ -n "${feature}" ]; then
   export workspace="${environment}-${feature}"
fi

### Pre Hook
pre_hook

## Initialize
test "$command" != "fmt" && init

### Run the command
eval "${command}"

# Log the result
test $? -ne 0 -a "x${BUILDKITE}" = "xtrue" && { echo "^^^ +++"; exit 1; }
unset module_path vars

### Post hooks
post_hook
